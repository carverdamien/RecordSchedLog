#!/bin/bash

trace_cmd_start() {
    echo 0 > /sys/kernel/debug/tracing/tracing_on
    echo nop > /sys/kernel/debug/tracing/current_tracer
    echo 0 > /sys/kernel/debug/tracing/events/enable
    echo 1 > /sys/kernel/debug/tracing/free_buffer || true
    echo ${TRACING_BUFFER_SIZE_KB:=$((2**20))} > /sys/kernel/debug/tracing/buffer_size_kb
    echo 1 > /sys/kernel/debug/tracing/events/sched/enable
    cat /sys/kernel/debug/tracing/set_event
    echo 1 > /sys/kernel/debug/tracing/tracing_on
}
trace_cmd_stop() {
    echo 0 > /sys/kernel/debug/tracing/tracing_on
    echo 0 > /sys/kernel/debug/tracing/events/enable
    mkdir ${OUTPUT}/trace
    for cf in /sys/kernel/debug/tracing/per_cpu/cpu*
    do
	cpuname="${cf##*/}"
	touch "${OUTPUT}/trace/${cpuname}"
	dd iflag=nonblock if="${cf}/trace_pipe_raw" of="${OUTPUT}/trace/${cpuname}" || true
    done
    for format in $(cd /sys/kernel/debug/tracing/; find events/sched -name format)
    do
	mkdir -p $(dirname ${OUTPUT}/trace/$format)
	cat /sys/kernel/debug/tracing/$format > ${OUTPUT}/trace/$format
    done
    cat "/sys/kernel/debug/tracing/events/header_page" > "${OUTPUT}/trace/events/header_page"
    tar -C ${OUTPUT} -czf "${OUTPUT}/trace.tgz" trace
    rm -rf ${OUTPUT}/trace
    echo 1 > /sys/kernel/debug/tracing/free_buffer || true
}
case ${MONITORING_SCHEDULED} in
        n) trace_cmd_start ;;
        y) (sleep ${MONITORING_START_DELAY}; trace_cmd_start; sleep ${MONITORING_STOP_DELAY}; trace_cmd_stop) & ;;
        *) exit 1 ;;
esac
