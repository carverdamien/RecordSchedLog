#!/usr/bin/env python3

import sys
import pandas as pd
import numpy as np
import seaborn as sb
import matplotlib.pyplot as plt

# Usage
#   ./barplot.py host input.pkl.gz output.pdf

# Input file can be generated by raw2df.py

_, host, input_file, output_file = sys.argv

benchmarks = {
    'hrtimers': [ 'schbench-6-1', 'schbench-6-2', 'schbench-6-3',
                  'schbench-6-4', 'schbench-6-5', 'schbench-6-6', 'schbench-6-7'],
    'i80': [ 'aobench-0', 'apache-0', 'apache-siege-1', 'apache-siege-2',
             'apache-siege-3', 'apache-siege-4', 'apache-siege-5',
             'build-linux-kernel-0', 'build-llvm-0', 'c-ray-0',
             'compress-7zip-0', 'deepspeech-0', 'git-0', 'go-benchmark-1',
             'go-benchmark-2', 'go-benchmark-3', 'go-benchmark-4',
             'hackbench-10000', 'kbuild-all-160', 'kbuild-all-320',
             'kbuild-all-80', 'kbuild-sched-160', 'kbuild-sched-320',
             'kbuild-sched-80', 'llvmcmake', 'mkl-dnn-7-1', 'mkl-dnn-7-2',
             'nas_bt.B-160', 'nas_bt.B-80', 'nas_cg.C-160', 'nas_cg.C-80',
             'nas_ep.C-160', 'nas_ep.C-80', 'nas_ft.C-160', 'nas_ft.C-80',
             'nas_lu.B-160',
             'nas_lu.B-80', 'nas_mg.D-160', 'nas_mg.D-80',
             'nas_sp.B-160', 'nas_sp.B-80', 'nas_ua.B-160', 'nas_ua.B-80',
             'node-octane-1', 'oltp-mysql-160', 'oltp-mysql-320',
             'oltp-mysql-80', 'openssl-0', 'perl-benchmark-1',
             'perl-benchmark-2', 'phpbench-0', 'redis-1', 'rust-prime-0',
             'schbench-6-7', 'scimark2-1', 'scimark2-2', 'scimark2-3',
             'scimark2-4', 'scimark2-5', 'scimark2-6'
    ],
    'latitude': [ 'aobench-0', 'apache-siege-1', 'apache-siege-2',
                  'apache-siege-3', 'apache-siege-4',
                  'build-linux-kernel-0', 'build-llvm-0', 'c-ray-0',
                  'compress-7zip-0', 'deepspeech-0', 'git-0', 'go-benchmark-1',
                  'go-benchmark-2', 'go-benchmark-3', 'go-benchmark-4',
                  'hackbench-1000', 'kbuild-all-16', 'kbuild-all-4',
                  'kbuild-all-8', 'kbuild-sched-16', 'kbuild-sched-4',
                  'kbuild-sched-8', 'llvmcmake', 'mkl-dnn-7-1', 'mkl-dnn-7-2',
                  'nas_bt.B-4', 'nas_bt.B-8', 'nas_cg.C-4', 'nas_cg.C-8',
                  'nas_ep.C-4', 'nas_ep.C-8', 'nas_ft.C-4', 'nas_ft.C-8',
                  'nas_lu.B-4', 'nas_lu.B-8', 'nas_sp.B-4', 'nas_sp.B-8',
                  'nas_ua.B-4', 'nas_ua.B-8',
                  'node-octane-1',
                  'openssl-0', 'perl-benchmark-1',
                  'perl-benchmark-2', 'phpbench-0', 'redis-1', 'rust-prime-0',
                  'scimark2-1', 'scimark2-2', 'scimark2-3', 'scimark2-4',
                  'scimark2-5', 'scimark2-6'
    ],
    'redha': [ 'aobench-0', 'apache-0', 'apache-siege-1', 'apache-siege-2',
               'apache-siege-3', 'apache-siege-4', 'apache-siege-5',
               'build-linux-kernel-0', 'build-llvm-0', 'c-ray-0',
               'compress-7zip-0', 'deepspeech-0', 'git-0', 'go-benchmark-1',
               'go-benchmark-2', 'go-benchmark-3', 'go-benchmark-4',
               'hackbench-1000', 'kbuild-all-12', 'kbuild-all-24',
               'kbuild-all-6', 'kbuild-sched-12', 'kbuild-sched-24',
               'kbuild-sched-6', 'llvmcmake', 'mkl-dnn-7-1', 'mkl-dnn-7-2',
               'nas_bt.B-12', 'nas_bt.B-6', 'nas_cg.C-12', 'nas_cg.C-6',
               'nas_ep.C-12', 'nas_ep.C-6', 'nas_ft.C-12', 'nas_ft.C-6',
               'nas_lu.B-12', 'nas_lu.B-6', 'nas_sp.B-12', 'nas_sp.B-6',
               'nas_ua.B-12', 'nas_ua.B-6',
               'node-octane-1',
               'openssl-0', 'perl-benchmark-1',
               'perl-benchmark-2', 'phpbench-0', 'redis-1', 'rust-prime-0',
               'schbench-6-7', 'scimark2-1', 'scimark2-2', 'scimark2-3',
               'scimark2-4', 'scimark2-5', 'scimark2-6'
    ],
}
higher_is_better = [ 'apache-0', 'apache-siege-1', 'apache-siege-2', 'apache-siege-3',
                     'apache-siege-4', 'apache-siege-5', 'node-octane-1', 'oltp-mysql-160',
                     'oltp-mysql-320', 'oltp-mysql-80', 'redis-1', 'scimark2-1', 'scimark2-2',
                     'scimark2-3',  'scimark2-4', 'scimark2-5', 'scimark2-6', 'compress-7zip-0',
                     'openssl-0', 'phpbench-0' ]

base_sched = {
    'hrtimers': { 'sched': 'schedlog', 'gov': 'powersave-y' },
    'i80':      { 'sched': 'schedlog', 'gov': 'powersave-y' },
    'latitude': { 'sched': 'lp-0',     'gov': 'powersave-y' },
    'redha':    { 'sched': '5.4',      'gov': 'powersave-y' },
}
schedulers = {
    'hrtimers' : [ { 'sched': '5.4-hrtimers', 'gov': 'powersave-y' } ],
    'i80': [
        { 'sched': 'fdp-50', 'gov': 'powersave-y' },
        # { 'sched': 'dpi-50', 'gov': 'powersave-y' },
        # { 'sched': 'dpi-50', 'gov': 'schedutil-y' },
        # { 'sched': 'fdp-50', 'gov': 'powersave-y' },
        # { 'sched': 'local',  'gov': 'powersave-y' },
        # { 'sched': 'local',  'gov': 'schedutil-y' },
    ],
    'latitude': [
        { 'sched': 'dpi-50', 'gov': 'powersave-y' },
        { 'sched': 'dpi-50', 'gov': 'schedutil-y' },
        { 'sched': 'fdp-50', 'gov': 'powersave-y' },
        { 'sched': 'local',  'gov': 'powersave-y' },
        { 'sched': 'local',  'gov': 'schedutil-y' },
    ],
    'redha': [
        { 'sched': 'dpi-50', 'gov': 'powersave-y' },
        { 'sched': 'dpi-50', 'gov': 'schedutil-y' },
        { 'sched': 'fdp-50', 'gov': 'powersave-y' },
        { 'sched': 'local',  'gov': 'powersave-y' },
        { 'sched': 'local',  'gov': 'schedutil-y' },
    ],
}
hosts = { 'i80': 'Server',
          'latitude': 'Laptop',
          'redha': 'Desktop',
}
sched_renames = { 'lp-2/powersave-y': 'local fork placement' }

df = pd.read_pickle(input_file)

keep = np.zeros(len(df), dtype=bool)
for b in benchmarks[host]:
    for s in schedulers[host] + [base_sched[host]]:
        keep = keep | ((df['bench'] == b) & (df['sched'] == s['sched']) & (df['power'] == s['gov']))
df = df[keep]

# print(df)

sel_baseline = (df['sched'] == base_sched[host]['sched']) & (df['power'] == base_sched[host]['gov'])
df['sched'] = df['sched'] + '/' + df['power']

perf_means = {}
energy_means = {}
for b in benchmarks[host]:
    sel_b = df['bench'] == b
    base = df[sel_b & sel_baseline]
    if len(base) == 0:
        continue
    # Normalize perf
    perf_b = base['perf'].mean()
    # perf_a  = base['perf'].std()
    # perf_b = df['perf'][sel_b].mean()
    # perf_a  = df['perf'][sel_b].std()
    if b in higher_is_better:
        perf_a  = base['perf'].max() / 100.
        # perf_a  = df['perf'][sel_b].max() / 100.
        df.loc[sel_b,['perf']] = (df['perf'][sel_b].values - perf_b) / perf_a
    else:
        perf_a  = base['perf'].min() / 100.
        # perf_a  = df['perf'][sel_b].min() / 100.
        df.loc[sel_b,['perf']] = (perf_b - df['perf'][sel_b].values) / perf_a
    # Normalize energy
    energy_b = base['energy'].mean()
    # energy_a  = base['energy'].std()
    # energy_b = df['energy'][sel_b].mean()
    # energy_a  = df['energy'][sel_b].std()
    # energy_a  = df['energy'][sel_b].min() / 100.
    energy_a  = base['energy'].min() / 100.
    df.loc[sel_b, ['energy']] = (energy_b - df['energy'][sel_b].values) / energy_a
    
    first_sched = df[sel_b & (df['sched'] == (schedulers[host][0]['sched'] + '/' + schedulers[host][0]['gov']))]
    perf_means[b] = np.mean(first_sched['perf'].values)
    energy_means[b] = np.mean(first_sched['energy'].values)

sorted_bench_perf = [k for k, v in sorted(perf_means.items(), key=lambda item: item[1])]
# for s in sorted_bench_perf:
#     print("{}: {}".format(s, perf_means[s]))
sorted_bench_energy = [k for k, v in sorted(energy_means.items(), key=lambda item: item[1])]
# print(df)

# Plot perf figures
fig, (axP, axE) = plt.subplots(2, 1, figsize=(17,5))
for ax, p_or_e in [ (axP, 'perf'), (axE, 'energy') ]:
    sb.barplot(ax=ax, data=df, x='bench', y=p_or_e,
               order=sorted_bench_perf,
               hue='sched',
               hue_order = [ s['sched']+'/'+s['gov'] for s in [base_sched[host]] + schedulers[host] ],
               estimator=np.mean, ci='sd', errwidth=1,
               palette='hls')
    ax.tick_params(axis='x', labelrotation=90)
    ax.set_xlabel("")
    ax.tick_params(axis='y', right=True, labelright=True)
    ax.set_ylabel('{} (%)'.format('Performance' if p_or_e=='perf' else 'Energy'))
    ax.grid(b=True, axis='x', which='both')
    ax.get_legend().remove()
    
axP.tick_params(axis='x', which='both', labelbottom=False)
handles, labels = axP.get_legend_handles_labels()
# axE.set_ylim(-70, 70)
#fig.suptitle('{}'.format(hosts[host]), fontsize=14, fontweight='bold')
new_labels = map(lambda x: sched_renames.get(x, x), labels)
fig.legend(handles=handles, labels=new_labels, ncol=4, loc='upper center')
fig.savefig(output_file, bbox_inches='tight')
